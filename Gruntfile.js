// Generated by CoffeeScript 1.8.0
var fileHTMLRewriter, mountFolder;

mountFolder = function(connect, dir) {
  return connect["static"](require('path').resolve(dir));
};

fileHTMLRewriter = function(_arg) {
  var acceptsHtmlExplicit, excludeList, isExcluded, regex, snippet;
  regex = _arg.regex, snippet = _arg.snippet;
  excludeList = [".woff", ".js", ".css", ".ico"];
  acceptsHtmlExplicit = function(req) {
    var accept;
    accept = req.headers["accept"];
    if (!accept) {
      return false;
    }
    return ~accept.indexOf("html");
  };
  isExcluded = function(req) {
    var excluded, url;
    url = req.url;
    excluded = false;
    if (!url) {
      return true;
    }
    excludeList.forEach(function(exclude) {
      if (~url.indexOf(exclude)) {
        return excluded = true;
      }
    });
    return excluded;
  };
  return function(req, res, next) {
    var write;
    write = res.write;
    if (!acceptsHtmlExplicit(req) || isExcluded(req)) {
      return next();
    }
    res.write = function(string, encoding) {
      var body;
      body = string instanceof Buffer ? string.toString() : string;
      body = body.replace(regex, snippet);
      if (string instanceof Buffer) {
        string = new Buffer(body);
      } else {
        string = body;
      }
      if (!this.headerSent) {
        this.setHeader('content-length', Buffer.byteLength(body) + snippet.lenght);
        this._implicitHeader();
      }
      return write.call(res, string, encoding);
    };
    return next();
  };
};

module.exports = function(grunt) {
  var e, yeomanConfig;
  grunt.loadNpmTasks('grunt-contrib-clean');
  grunt.loadNpmTasks('grunt-contrib-coffee');
  grunt.loadNpmTasks('grunt-contrib-compass');
  grunt.loadNpmTasks('grunt-contrib-concat');
  grunt.loadNpmTasks('grunt-contrib-connect');
  grunt.loadNpmTasks('grunt-contrib-copy');
  grunt.loadNpmTasks('grunt-contrib-cssmin');
  grunt.loadNpmTasks('grunt-contrib-htmlmin');
  grunt.loadNpmTasks('grunt-contrib-jade');
  grunt.loadNpmTasks('grunt-contrib-imagemin');
  grunt.loadNpmTasks('grunt-contrib-uglify');
  grunt.loadNpmTasks('grunt-contrib-requirejs');
  grunt.loadNpmTasks('grunt-contrib-watch');
  grunt.loadNpmTasks('grunt-open');
  grunt.loadNpmTasks('grunt-usemin');
  grunt.loadNpmTasks('grunt-mocha');
  grunt.loadNpmTasks('grunt-coffeecov');
  grunt.loadNpmTasks('grunt-kss');
  yeomanConfig = {
    app: 'app',
    src: 'src',
    dist: 'dist',
    test: 'test',
    docs: 'docs',
    tmp: '.tmp',
    tmp_dist: '.tmp-dist',
    server_port: 9000,
    livereload_port: 35729
  };
  try {
    yeomanConfig.app = require('./bower.json').appPath || yeomanConfig.app;
  } catch (_error) {
    e = _error;
  }
  grunt.initConfig({
    yeoman: yeomanConfig,
    watch: {
      options: {
        interrupt: true
      },
      jade: {
        files: ['<%= yeoman.app %>/{,**/}*.jade'],
        tasks: ['jade:dist']
      },
      coffee: {
        files: ['<%= yeoman.src %>/coffee/{,**/}*.coffee'],
        tasks: ['coffee:dist']
      },
      compass: {
        files: ['<%= yeoman.src %>/sass/{,**/}*.{scss,sass}'],
        tasks: ['compass:server', 'kss']
      },
      files: {
        files: ['<%= yeoman.tmp %>/{,**/}*.{html,css,js}', '<%= yeoman.app %>/{,**/}*.html', '<%= yeoman.app %>/css/{,**/}*.css', '<%= yeoman.app %>/js/{,**/}*.js', '<%= yeoman.app %>/images/{,**/}*.{png,jpg,jpeg}', '!<%= yeoman.app %>/components/**'],
        tasks: [],
        options: {
          livereload: yeomanConfig.livereload_port
        }
      }
    },
    connect: {
      server: {
        options: {
          port: yeomanConfig.server_port,
          hostname: '0.0.0.0',
          middleware: function(connect) {
            return [
              require('connect-livereload')({
                port: yeomanConfig.livereload_port
              }), mountFolder(connect, yeomanConfig.tmp), mountFolder(connect, yeomanConfig.app), mountFolder(connect, yeomanConfig.docs)
            ];
          }
        }
      },
      dist: {
        options: {
          port: yeomanConfig.server_port + 1,
          hostname: '0.0.0.0',
          middleware: function(connect) {
            return [mountFolder(connect, yeomanConfig.dist)];
          }
        }
      },
      test: {
        options: {
          port: yeomanConfig.server_port + 2,
          hostname: '0.0.0.0',
          middleware: function(connect) {
            return [
              require('connect-livereload')({
                port: yeomanConfig.livereload_port
              }), fileHTMLRewriter({
                snippet: ["<!-- Test snippet-->", "<script src=\"components/mocha/mocha.js\"></script>", "<link rel=\"stylesheet\" href=\"components/mocha/mocha.css\">", "<script>", "    window.is_test = true;", "</script>", ""].join('\n'),
                regex: /<!-- Test snippet-->/
              }), mountFolder(connect, yeomanConfig.test), mountFolder(connect, yeomanConfig.tmp), mountFolder(connect, yeomanConfig.app)
            ];
          }
        }
      }
    },
    open: {
      server: {
        path: 'http://localhost:<%= connect.server.options.port %>'
      },
      dist: {
        path: 'http://localhost:<%= connect.dist.options.port %>'
      },
      test: {
        path: 'http://localhost:<%= connect.test.options.port %>'
      },
      styleguide: {
        path: '<%= open.server.path %>/styleguide/index.html'
      }
    },
    clean: {
      dist: ['<%= yeoman.dist %>'],
      tmp: ['<%= yeoman.tmp %>'],
      tmp_dist: ['<%= yeoman.tmp_dist %>'],
      components: ['<%= yeoman.dist %>/components'],
      templates: ['<%= yeoman.dist %>/templates'],
      spec: ['<%= yeoman.dist %>/js/spec']
    },
    jade: {
      dist: {
        options: {
          pretty: true
        },
        files: [
          {
            expand: true,
            cwd: '<%= yeoman.app %>',
            src: ['**/*.jade'],
            dest: '<%= yeoman.tmp %>',
            ext: '.html'
          }
        ]
      }
    },
    coffee: {
      dist: {
        expand: true,
        cwd: '<%= yeoman.src %>/coffee/',
        src: ['**/*.coffee'],
        dest: '<%= yeoman.tmp %>/js',
        ext: '.js'
      }
    },
    coffeecov: {
      options: {
        path: 'relative'
      },
      dist: {
        src: '<%= yeoman.src %>/coffee/app',
        dest: '<%= yeoman.tmp %>/js/app'
      }
    },
    compass: {
      options: {
        sassDir: '<%= yeoman.src %>/sass',
        cssDir: '<%= yeoman.tmp %>/css',
        imagesDir: '<%= yeoman.app %>/images',
        javascriptsDir: '<%= yeoman.app %>/js',
        fontsDir: './css/fonts',
        importPath: ['<%= yeoman.app %>/components'],
        relativeAssets: true
      },
      dist: {
        options: {
          force: true,
          outputStyle: 'compressed',
          environment: 'production'
        }
      },
      server: {
        options: {
          debugInfo: true
        }
      }
    },
    kss: {
      options: {
        template: '<%= yeoman.src %>/styleguide',
        preprocessor: 'sass'
      },
      files: {
        src: '<%= yeoman.src %>/sass',
        dest: '<%= yeoman.docs %>/styleguide'
      }
    },
    mocha: {
      all: {
        options: {
          mocha: {
            ignoreLeaks: true
          },
          urls: ['http://localhost:<%= connect.test.options.port %>/'],
          run: false,
          reporter: 'mocha-phantom-coverage-reporter',
          timeout: 60000
        }
      }
    },
    copy: {
      dist: {
        files: [
          {
            expand: true,
            cwd: '<%= yeoman.tmp %>/',
            src: ['**'],
            dest: '<%= yeoman.tmp_dist %>/'
          }, {
            expand: true,
            cwd: '<%= yeoman.app %>/',
            src: ['**'],
            dest: '<%= yeoman.tmp_dist %>/'
          }
        ]
      }
    },
    useminPrepare: {
      html: '<%= yeoman.tmp_dist %>/index.html',
      options: {
        dest: '<%= yeoman.dist %>'
      }
    },
    usemin: {
      html: ['<%= yeoman.dist %>/{,*/}*.html'],
      css: ['<%= yeoman.dist %>/css/{,*/}*.css'],
      options: {
        dirs: ['<%= yeoman.dist %>']
      }
    },
    imagemin: {
      dist: {
        files: [
          {
            expand: true,
            cwd: '<%= yeoman.app %>/images',
            src: '{,*/}*.{png,jpg,jpeg}',
            dest: '<%= yeoman.dist %>/images'
          }
        ]
      }
    },
    htmlmin: {
      dist: {
        files: [
          {
            expand: true,
            cwd: '<%= yeoman.app %>',
            src: ['*.html', 'templates/*.html'],
            dest: '<%= yeoman.dist %>'
          }
        ]
      }
    },
    uglify: {
      dist: {
        files: [
          {
            expand: true,
            cwd: '<%= yeoman.dist %>/js',
            src: '**/*.js',
            dest: '<%= yeoman.dist %>/js'
          }
        ]
      }
    },
    requirejs: {
      compile: {
        options: {
          baseUrl: 'js/',
          appDir: './<%= yeoman.tmp_dist %>/',
          dir: './<%= yeoman.dist %>/',
          wrap: true,
          removeCombined: true,
          keepBuildDir: true,
          inlineText: true,
          mainConfigFile: '<%= yeoman.tmp_dist %>/js/main.js',
          optimize: "none",
          modules: [
            {
              name: 'app/vendors',
              exclude: []
            }, {
              name: 'app/app',
              exclude: ['app/vendors']
            }, {
              name: 'main',
              exclude: ['config', 'app/app', 'app/vendors']
            }
          ]
        }
      }
    }
  });
  grunt.event.on('watch', function(action, filepath, target) {
    var match;
    match = grunt.file.isMatch(grunt.config('watch.coffee.files'), filepath);
    if (target === 'coffee' && match) {
      return grunt.config(['coffee', 'dist', 'src'], [filepath.replace("" + yeomanConfig.src + "/coffee/", "")]);
    }
  });
  grunt.registerTask('test', ['coffee:dist', 'coffeecov:dist', 'compass:server', 'connect:test', 'mocha']);
  grunt.registerTask('server', ['coffee:dist', 'compass:server', 'kss', 'connect:server', 'open:server', 'watch']);
  grunt.registerTask('server-test', ['coffee:dist', 'coffeecov:dist', 'compass:server', 'connect:test', 'open:test', 'watch']);
  grunt.registerTask('server-dist', ['connect:dist', 'open:dist', 'watch:files']);
  grunt.registerTask('compile', ['jade:dist', 'coffee:dist', 'compass:server']);
  grunt.registerTask('build', ['clean:dist', 'clean:tmp', 'clean:tmp_dist', 'jade:dist', 'coffee', 'compass:dist', 'copy:dist', 'connect:test', 'mocha', 'requirejs:compile', 'useminPrepare', 'imagemin', 'htmlmin', 'concat', 'usemin', 'cssmin', 'clean:tmp_dist', 'clean:components', 'clean:templates', 'clean:spec', 'uglify']);
  return grunt.registerTask('default', ['build']);
};
